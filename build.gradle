import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.methods.HttpGet
import org.apache.http.impl.auth.BasicScheme
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.sonarqube' version '4.2.1.3168'
    id 'org.openapi.generator' version '7.1.0'
    id 'jacoco'
}

group = 'com.training.license.sharing'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.modelmapper:modelmapper:2.4.4'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.5'
    testImplementation 'junit:junit:4.13.1'

    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    runtimeOnly 'org.postgresql:postgresql'
}

test {
    useJUnitPlatform()
}

sonar {
    properties {
        property 'sonar.projectKey', 'traininglicencesharing_backend_AYwf_zsIq8w_9GkYySv_'
        property 'sonar.projectName', 'Backend'
        property 'sonar.qualitygate.wait', true
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport.xml'
    }
}

tasks.register('generateOpenApiDocumentation') {
    doLast {
        println 'Fetching OpenAPI documentation...'

        def credsProvider = new BasicCredentialsProvider()
        def credentials = new UsernamePasswordCredentials("admin@example.com", "adminPassword")
        credsProvider.setCredentials(AuthScope.ANY, credentials)

        def client = HttpClients.custom()
                .setDefaultCredentialsProvider(credsProvider)
                .build()

        def request = new HttpGet("http://localhost:8080/v3/api-docs")
        request.addHeader(new BasicScheme().authenticate(credentials, request, null))

        def response = client.execute(request)
        def apiDocs = EntityUtils.toString(response.getEntity())

        def outputFile = new File("$buildDir/open-api.yaml")
        outputFile.parentFile.mkdirs()
        outputFile.text = apiDocs
        println "OpenAPI documentation generated at: ${outputFile.absolutePath}"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

